<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Trello Board</title>
    <link rel="stylesheet" href="../src/bootstrap.min.css">
    <style>
        ::-webkit-scrollbar {
            width: 6px;
            height: 6px;
            background-color: #e9ecef;
        }

        ::-webkit-scrollbar-thumb {
            background-color: var(--secondary);
        }

        .row + .row {
            margin-top: 1rem;
        }

        #trello-map {
            padding: 15px 0px;
        }
    </style>
    <script src="../src/jquery-3.3.1.min.js"></script>
    <script src="../src/bootstrap.min.js"></script>
    <script src="https://trello.com/1/client.js?key=0b710754e2d70514312df179647deff6"></script>

    <script>
        $(function() {
            let url = new URL(window.location.href);
            let board = url.searchParams.get("board");
            if (board.length < 2) return (location.href = `index.htm`);

            Trello.get(`boards/${board}`, function(v) {
                $("#trello-board-name").text(`${v.name} : roadmap`);
                Trello.get(`boards/${board}/lists`, function (v) {
                    let name_row = document.createElement("div");
                    name_row.classList.add("row");
                    name_row.classList.add("font-weight-bold");
                    $("#trello-map").append(name_row);
                    let pre_col = document.createElement("div");
                    pre_col.classList.add("col-sm-2");
                    $(pre_col).text("");
                    $(name_row).append(pre_col);

                    // get lists
                    let lists = new Map();
                    for (let i = 0; i < v.length; i++) {
                        let vi = v[i];
                        lists.set(vi.id, vi);

                        let row = document.createElement("div");
                        row.classList.add("row");
                        $("#trello-map").append(row);

                        let name_col = document.createElement("div");
                        name_col.classList.add("col-sm-2");
                        name_col.classList.add("border");
                        //name_col.classList.add("border-right-0");
                        name_col.classList.add("font-weight-bold");

                        let table = document.createElement("table");
                        $(table).css("height", "100%");
                        let tbody = document.createElement("tbody");
                        $(table).append(tbody);
                        let tr = document.createElement("tr");
                        $(tbody).append(tr);
                        let td = document.createElement("td");
                        td.classList.add("align-middle");
                        $(td).text(vi.name);
                        $(tr).append(td);

                        $(name_col).append(table);
                        $(row).append(name_col);
                    }

                    Trello.get(`boards/${board}/cards`, function (v) {
                        // get cards
                        let cards = new Map();
                        let lasts = [];
                        for (let i = 0; i < v.length; i++) {
                            let vi = v[i];

                            if (typeof(vi.due) === "string") {
                                let d = Date.parse(vi.due);
                                if (cards.get(d)) {
                                    cards.get(d).push(vi);
                                } else {
                                    cards.set(d, [vi]);
                                }
                            } else {
                                lasts.push(vi);
                            }
                        }

                        let lists_k = Array.from(lists.keys()).sort();
                        let lists_k_s = {};
                        for (let i = 0; i < lists_k.length; i++) lists_k_s[lists_k[i]] = i;

                        //updating cols
                        let cards_k = Array.from(cards.keys()).sort();
                        $("#trello-map").css("width", `${270*cards_k.length + 170}px`);
                        for (let i = 0; i < cards_k.length + (lasts.length > 0); i++) {
                            let card = cards.get(cards_k[i]) ? cards.get(cards_k[i])[0] : lasts;
                            let col = document.createElement("div");
                            col.classList.add("col");
                            col.classList.add("border");
                            if (i - (lasts.length > 0) < cards_k.length - 1) col.classList.add("border-right-0");
                            col.classList.add("text-center");
                            if (i < cards_k.length) {
                                let d = new Date(Date.parse(card.due));
                                if (d.getTime() < Date.now()) col.classList.add("text-danger");
                                $(col).text(d.toLocaleString());
                            } else {
                                $(col).text("N/A");
                            }
                            $(name_row).append(col);
                            for (let j = 0; j < lists_k.length; j++) {
                                let ul = document.createElement("ul");
                                ul.classList.add("list-group");
                                let col = document.createElement("div");
                                col.classList.add("col");
                                //col.classList.add("border-left");
                                //if (i - (lasts.length > 0) < cards_k.length - 1) col.classList.add("border-right-0");
                                $(col).append(ul);
                                $(`#trello-map > .row:nth-of-type(${j + 2})`).append(col);
                            }
                        }

                        //put items int cols
                        for (let i = 0; i < cards_k.length; i++) {
                            let _cards = cards.get(cards_k[i]);
                            for (let j = 0; j < _cards.length; j++) {
                                let card = _cards[j];
                                //onsole.log(card);
                                let v_index = lists_k_s[card.idList];

                                let li = document.createElement("li");
                                li.classList.add("list-group-item");
                                if (card.dueComplete === true) li.classList.add("list-group-item-success");
                                let p = document.createElement("p");
                                let a = document.createElement("a");
                                a.classList.add("text-dark");
                                $(a).text(card.name + " ");
                                $(a).attr("href", card.shortUrl);
                                $(a).attr("target", "_blank");
                                $(p).append(a);
                                $(li).append(p);
                                p.addLabel = function(color, text = "") {
                                    let span = document.createElement("span");
                                    span.classList.add("badge");

                                    if (typeof(color) !== "string")
                                        span.classList.add("badge-light");
                                    else {
                                        $(span).css("background-color", color);
                                        $(span).css("color", "#ffffff");
                                    }

                                    if (text !== "")
                                        $(span).text(text);
                                    else
                                        $(span).html("&nbsp;&nbsp;&nbsp;&nbsp;");
                                    $(p).append(span);
                                    p.innerHTML += " ";
                                };

                                // put labels
                                for (let c = 0; c < card.idLabels.length; c++) {
                                    let lbl = card.idLabels[c];
                                    Trello.get(`labels/${lbl}`, function(v){
                                        console.log(v);
                                        p.addLabel(v.color, v.name);
                                    });
                                }

                                // create progress bar
                                let progress = document.createElement("div");
                                progress.classList.add("progress");
                                $(li).append(progress);
                                let progress_bar = document.createElement("div");
                                progress_bar.classList.add("progress-bar");
                                if (card.dueComplete === true) {
                                    progress_bar.classList.add("bg-success");
                                    progress_bar.classList.add("progress-bar-striped");
                                }
                                if (card.due && (Date.parse(card.due) < Date.now())) {
                                    progress_bar.classList.add("bg-danger");
                                    progress_bar.classList.add("progress-bar-striped");
                                }

                                $(progress_bar).attr("role", "progressbar");
                                $(progress_bar).attr("aria-valuemin", "0");
                                $(progress_bar).attr("aria-valuenow", "0");
                                $(progress_bar).attr("aria-valuemax", "0");
                                $(progress).append(progress_bar);
                                progress.addCheckbox = function(value, maxvalue) {
                                    if (typeof(value) !== "number") throw "TypeError";
                                    if (typeof(maxvalue) !== "number") throw "TypeError";

                                    $(progress_bar).attr("aria-valuenow", +$(progress_bar).attr("aria-valuenow") + value);
                                    $(progress_bar).attr("aria-valuemax", +$(progress_bar).attr("aria-valuemax") + maxvalue);

                                    $(progress_bar).css("width", `${+$(progress_bar).attr("aria-valuenow")/+$(progress_bar).attr("aria-valuemax") * 100}%`)
                                };

                                // put checkboxes into progress bar
                                for (let c = 0; c < card.idChecklists.length; c++) {
                                    let cid = card.idChecklists[c];
                                    Trello.get(`checklists/${cid}`, function(v) {
                                        let val = 0, mval = 0;
                                        for (let i = 0; i < v.checkItems.length; i++) {
                                            let item = v.checkItems[i];
                                            if (item.state === "complete") {
                                                val++;
                                                mval++;
                                            } else {
                                                mval++;
                                            }
                                        }
                                        progress.addCheckbox(val, mval);
                                    });
                                }

                                $(`#trello-map > .row:nth-of-type(${v_index + 2}) > .col:nth-of-type(${i + 2}) > ul`).append(li);
                            }
                        }
                        for (let i = 0; i < lasts.length; i++) {
                            let card = lasts[i];
                            let v_index = lists_k_s[card.idList];

                            let li = document.createElement("li");
                            li.classList.add("list-group-item");
                            $(li).text(card.name);

                            $(`#trello-map > .row:nth-of-type(${v_index + 2}) > .col:last-of-type > ul`).append(li);
                        }
                    }, function () {
                        $("#message-error .modal-body").text("Trello mapping error 2");
                        $("#message-error").modal("show");
                    });
                }, function () {
                    $("#message-error .modal-body").text("Trello mapping error");
                    $("#message-error").modal("show");
                });
            }, function() {
                return (location.href = `index.htm`);
            });
        });
    </script>
</head>
<body>
    <div class="container-fluid">
        <h1 id="trello-board-name" class="border-bottom"></h1>
        <div class="container-fluid" style="overflow-x: scroll;">
            <div id="trello-map">

            </div>
        </div>
    </div>

    <!-- Modal error -->
    <div class="modal fade" id="message-error" tabindex="-1" role="dialog" aria-labelledby="message-error-title" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content border-danger">
                <div class="modal-header">
                    <h5 class="modal-title text-danger" id="message-error-title">Error</h5>
                    <button type="button" class="close" data-dismiss="modal" aria-label="Close">
                        <span aria-hidden="true">&times;</span>
                    </button>
                </div>
                <div class="modal-body">
                    Text
                </div>
                <div class="modal-footer">
                    <button id="message-error-button" type="button" class="btn btn-secondary" data-dismiss="modal">OK</button>
                </div>
            </div>
        </div>
    </div>
</body>
</html>